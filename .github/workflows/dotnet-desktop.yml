
name: .NET Core Desktop

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Release]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: LiveStreamGenie.sln                        # Replace with your solution name, i.e. MyWpfApp.sln.
  
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        
    # Install Microsoft Office (modify the version as needed)
    - name: Install Microsoft Office
      run: choco install office365business -y 
      # choco install microsoft-365-business-desktop --version=16.0.14527.20234 -y
        
    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    # Build the application
    - name: Build the application
      run: msbuild LiveStreamGenie.sln /p:Configuration=Release

    # Publish the application
    - name: Publish the application
      run: dotnet publish -c Release -o ./publish

    # Create a release artifact
    - name: Create release artifact
      uses: actions/upload-artifact@v2
      with:
        name: winforms-app
        path: ./publish

        
    # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: MSIX Package
        path: ${{ env.Wap_Project_Directory }}\AppPackages
